<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dream.city.player.dao.FriendsMapper">
  <resultMap id="BaseResultMap" type="com.dream.city.player.entity.Friends">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="player_id" jdbcType="VARCHAR" property="playerId" />
    <result column="friend_id" jdbcType="VARCHAR" property="friendId" />
    <result column="agree" jdbcType="INTEGER" property="agree" />
    <result column="invite" jdbcType="VARCHAR" property="invite" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, player_id, friend_id, agree, invite,create_time,update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from player_friends
    where id = #{id,jdbcType=BIGINT}
  </select>

  <select id="selectByPlayerIdFriendId" parameterType="com.dream.city.player.entity.Friends" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from player_friends
    where 1 = 1
    <if test="playerId != null and playerId != ''">
      and player_id = #{playerId,jdbcType=VARCHAR}
    </if>
    <if test="friendId != null and friendId != ''">
      and friend_id = #{friendId,jdbcType=VARCHAR}
    </if>
    order by create_time desc limit 1
  </select>

  <!-- 好友列表  -->
  <select id="friendList" parameterType="com.dream.city.player.entity.Friends" resultType="java.util.Map">
    select a.id, a.player_id playerId, a.friend_id friendId, a.agree,
      b.friend_name friendName,b.friend_nick friendNick,b.friendlink,b.imgurl FROM
      (select f.id, f.player_id, f.friend_id , f.agree,f.create_time FROM player_friends f,city_player p
      where f.player_id =p.player_id  and f.agree =1 and p.player_name = #{condition.username,jdbcType=VARCHAR}
      ) a,
      (SELECT p.player_id friend_id,p.player_name friend_name,p.player_nick friend_nick,e.friendlink,e.imgurl
      FROM city_player p,player_ext e WHERE p.player_id=e.player_id) b
    WHERE a.friend_id = b.friend_id
    <if test="condition.nick != null">
      and b.friend_nick = #{condition.nick,jdbcType=VARCHAR}
    </if>
    ORDER BY a.create_time DESC limit ${start},${pageSize}
  </select>
  <select id="friendCount" parameterType="com.dream.city.player.entity.Friends" resultType="java.lang.Integer">
    select COUNT(a.friend_id) FROM
      (select f.id, f.player_id, f.friend_id , f.agree,f.create_time FROM player_friends f,city_player p
      where f.player_id =p.player_id  and f.agree =1 and p.player_name = #{condition.username,jdbcType=VARCHAR}
      ) a,
      (SELECT p.player_id friend_id,p.player_name friend_name,p.player_nick friend_nick,e.friendlink,e.imgurl
      FROM city_player p,player_ext e WHERE p.player_id=e.player_id) b
    WHERE a.friend_id = b.friend_id
    <if test="condition.nick != null">
      and b.friend_nick = #{condition.nick,jdbcType=VARCHAR}
    </if>
  </select>

  <!-- 申请列表  -->
  <select id="applyFriendList" parameterType="com.dream.city.player.entity.Friends" resultType="java.util.Map">
    select a.id, a.player_id playerId, a.friend_id friendId, a.agree,
      b.friend_name username,b.friend_nick nick,b.friendlink playerLink,b.imgurl,g.grade,g.integral
    FROM (select f.id, f.player_id, f.friend_id , f.agree,f.create_time FROM player_friends f,city_player p
      where f.player_id =p.player_id and f.agree =0 and p.player_name = #{condition.username,jdbcType=VARCHAR}
      ) a INNER JOIN
      (SELECT p.player_id friend_id,p.player_name friend_name,p.player_nick friend_nick,e.friendlink,e.imgurl
      FROM city_player p,player_ext e WHERE p.player_id=e.player_id) b ON a.friend_id = b.friend_id
           INNER JOIN player_grade g ON b.friend_id=g.player_id
      WHERE a.friend_id = b.friend_id and b.friend_id=g.player_id
      <if test="condition.nick != null and condition.nick != ''">
        and b.friend_nick = #{condition.nick,jdbcType=VARCHAR}
      </if>
    ORDER BY a.create_time DESC limit ${start},${pageSize}
  </select>
  <select id="applyFriendCount" parameterType="com.dream.city.player.entity.Friends" resultType="java.lang.Integer">
    select COUNT(a.friend_id)
    FROM (select f.id, f.player_id, f.friend_id , f.agree,f.create_time FROM player_friends f,city_player p
      where f.player_id =p.player_id and f.agree =0 and p.player_name = #{condition.username,jdbcType=VARCHAR}
      ) a INNER JOIN
    (SELECT p.player_id friend_id,p.player_name friend_name,p.player_nick friend_nick,e.friendlink,e.imgurl
    FROM city_player p,player_ext e WHERE p.player_id=e.player_id) b ON a.friend_id = b.friend_id
    INNER JOIN player_grade g ON b.friend_id=g.player_id
    WHERE a.friend_id = b.friend_id and b.friend_id=g.player_id
    <if test="condition.nick != null and condition.nick != ''">
      and b.friend_nick = #{condition.nick,jdbcType=VARCHAR}
    </if>
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from player_friends
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insertSelective" parameterType="com.dream.city.player.entity.Friends">
    insert into player_friends
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="playerId != null">
        player_id,
      </if>
      <if test="friendId != null">
        friend_id,
      </if>
      <if test="agree != null">
        agree,
      </if>
      <if test="invite != null">
        invite,
      </if>
      create_time,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="playerId != null">
        #{playerId},
      </if>
      <if test="friendId != null">
        #{friendId},
      </if>
      <if test="agree != null">
        #{agree},
      </if>
      <if test="invite != null">
        #{invite},
      </if>
      now(),
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.dream.city.player.entity.Friends">
    update player_friends
    <set>
      <if test="playerId != null">
        player_id = #{playerId,jdbcType=VARCHAR},
      </if>
      <if test="friendId != null">
        friend_id = #{friendId,jdbcType=VARCHAR},
      </if>
      <if test="agree != null">
        agree = #{agree,jdbcType=INTEGER},
      </if>
      <if test="invite != null">
        invite = #{invite,jdbcType=VARCHAR},
      </if>
      update_time = now(),
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>


  <update id="agreeAddFriend" parameterType="com.dream.city.player.entity.Friends">
    update player_friends
    <set>
      <if test="agree != null">
        agree = #{agree,jdbcType=INTEGER},
      </if>
      update_time = now(),
    </set>
    where player_id = #{playerId,jdbcType=VARCHAR} and friend_id = #{friendId,jdbcType=VARCHAR}

  </update>



  <select id="getFriendAgree" parameterType="com.dream.city.player.entity.Friends" resultType="java.lang.Integer">
    SELECT f.agree FROM player_friends f
    WHERE f.agree = 1
    AND f.player_id = #{playerId,jdbcType=VARCHAR}
    AND f.friend_id = #{friendId,jdbcType=VARCHAR}
    order by create_time desc limit 1
  </select>


</mapper>